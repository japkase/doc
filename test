package com.allurexray.allure;

import com.fasterxml.jackson.databind.JsonNode;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;

import java.net.URI;

@Component
public class AllureClient {

	private final RestTemplate restTemplate;

	public AllureClient() {
		this.restTemplate = new RestTemplate();
		this.restTemplate.getMessageConverters().add(new MappingJackson2HttpMessageConverter());
	}

	public JsonNode fetchSummary(URI allureBaseDataUrl) {
		return fetchSummary(allureBaseDataUrl, null);
	}

	public JsonNode fetchSuites(URI allureBaseDataUrl) {
		return fetchSuites(allureBaseDataUrl, null);
	}

	public JsonNode fetchTestCase(URI allureBaseDataUrl, String uid) {
		return fetchTestCase(allureBaseDataUrl, uid, null);
	}

	public JsonNode fetchSummary(URI allureBaseDataUrl, String authHeader) {
		String url = ensureTrailingSlash(allureBaseDataUrl.toString()) + "widgets/summary.json";
		return exchangeJson(url, authHeader);
	}

	public JsonNode fetchSuites(URI allureBaseDataUrl, String authHeader) {
		String url = ensureTrailingSlash(allureBaseDataUrl.toString()) + "suites.json";
		return exchangeJson(url, authHeader);
	}

	public JsonNode fetchTestCase(URI allureBaseDataUrl, String uid, String authHeader) {
		String url = ensureTrailingSlash(allureBaseDataUrl.toString()) + "test-cases/" + uid + ".json";
		return exchangeJson(url, authHeader);
	}

	public String fetchAttachmentText(URI allureBaseDataUrl, String source, String authHeader) {
		String url = ensureTrailingSlash(allureBaseDataUrl.toString()) + "attachments/" + source;
		HttpHeaders headers = new HttpHeaders();
		if (authHeader != null && !authHeader.isBlank()) {
			headers.set(HttpHeaders.AUTHORIZATION, authHeader);
		}
		ResponseEntity<String> resp = restTemplate.exchange(url, HttpMethod.GET, new HttpEntity<>(headers), String.class);
		return resp.getBody();
	}

	private JsonNode exchangeJson(String url, String authHeader) {
		HttpHeaders headers = new HttpHeaders();
		if (authHeader != null && !authHeader.isBlank()) {
			headers.set(HttpHeaders.AUTHORIZATION, authHeader);
		}
		ResponseEntity<JsonNode> resp = restTemplate.exchange(url, HttpMethod.GET, new HttpEntity<>(headers), JsonNode.class);
		return resp.getBody();
	}

	private String ensureTrailingSlash(String s) {
		if (s == null || s.isBlank()) return s;
		return s.endsWith("/") ? s : s + "/";
	}
}
