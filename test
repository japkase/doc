package com.allurexray.importer;

import com.allurexray.allure.AllureClient;
import com.allurexray.api.dto.PreviewItem;
import com.allurexray.config.AppProperties;
import com.allurexray.jira.JiraXrayClient;
import com.fasterxml.jackson.databind.JsonNode;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.net.URI;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class AllureToXrayService {

	private final AllureClient allureClient;
	private final JiraXrayClient jiraXrayClient;
	private final AppProperties appProperties;

	public List<String> importAllTests() {
		return importAllTests(null, null, null, null);
	}

	public List<String> importAllTests(String repositoryPath) {
		return importAllTests(repositoryPath, null, null, null);
	}

	public List<String> importAllTests(String repositoryPath, String allureBaseUrlOverride, String jiraBaseUrlOverride, String patOverride) {
		return importAllTests(repositoryPath, allureBaseUrlOverride, jiraBaseUrlOverride, patOverride, null);
	}

	public List<String> importAllTests(String repositoryPath,
									 String allureBaseUrlOverride,
									 String jiraBaseUrlOverride,
									 String patOverride,
									 String allureAuthorizationHeader) {
		URI allureBaseDataUrl = resolveAllureBase(allureBaseUrlOverride);
		String jiraBaseUrl = resolveJiraBase(jiraBaseUrlOverride);
		String pat = resolvePat(patOverride);
		String projectKey = appProperties.getJira().getProjectKey();

		validateRequired(allureBaseDataUrl, jiraBaseUrl, pat, projectKey);

		JsonNode suites = allureClient.fetchSuites(allureBaseDataUrl, allureAuthorizationHeader);
		List<String> uids = new ArrayList<>();
		collectUidsRecursive(suites, uids);

		List<String> createdIssueKeys = new ArrayList<>();
		for (String uid : uids) {
			JsonNode testJson = allureClient.fetchTestCase(allureBaseDataUrl, uid, allureAuthorizationHeader);
			String issueKey = createTestInJira(jiraBaseUrl, pat, projectKey, testJson, allureBaseDataUrl, allureAuthorizationHeader);
			if (issueKey != null && !issueKey.isBlank()) {
				createdIssueKeys.add(issueKey);
				addStepsIfEnabled(jiraBaseUrl, pat, issueKey, testJson, allureBaseDataUrl, allureAuthorizationHeader);
			}
		}
		return createdIssueKeys;
	}

	public List<PreviewItem> previewPayloads(String allureBaseUrlOverride, String jiraBaseUrlOverride, String patOverride, String allureAuthorizationHeader) {
		URI allureBaseDataUrl = resolveAllureBase(allureBaseUrlOverride);
		String projectKey = appProperties.getJira().getProjectKey();
		if (allureBaseDataUrl == null) {
			throw new IllegalArgumentException("Allure base URL is required (override in request)");
		}
		if (projectKey == null || projectKey.isBlank()) {
			throw new IllegalArgumentException("Jira project key is required (configure app.jira.project-key)");
		}

		JsonNode suites = allureClient.fetchSuites(allureBaseDataUrl, allureAuthorizationHeader);
		List<String> uids = new ArrayList<>();
		collectUidsRecursive(suites, uids);

		List<PreviewItem> items = new ArrayList<>();
		for (String uid : uids) {
			JsonNode testJson = allureClient.fetchTestCase(allureBaseDataUrl, uid, allureAuthorizationHeader);
			String name = testJson.path("name").asText("");
			String fullName = testJson.path("fullName").asText("");
			String description = testJson.path("description").asText("");
			String summary = name != null && !name.isBlank() ? name : fullName;

			List<Map<String, String>> steps = extractAllureSteps(testJson, allureBaseDataUrl, allureAuthorizationHeader);

			Map<String, Object> issuePayload = new HashMap<>();
			Map<String, Object> fields = new HashMap<>();
			fields.put("project", Map.of("key", projectKey));
			fields.put("summary", summary);
			fields.put("description", buildDescription(description, steps));
			fields.put("issuetype", Map.of("name", "Test"));
			issuePayload.put("fields", fields);

			PreviewItem item = new PreviewItem();
			item.setTestUid(uid);
			item.setTestName(summary);
			item.setIssuePayload(issuePayload);
			item.setSteps(steps);
			items.add(item);
		}
		return items;
	}

	private String buildDescription(String baseDesc, List<Map<String, String>> steps) {
		StringBuilder sb = new StringBuilder();
		if (baseDesc != null && !baseDesc.isBlank()) sb.append(baseDesc).append("\n\n");
		if (!steps.isEmpty()) {
			Map<String, String> first = steps.get(0);
			String req = first.getOrDefault("action", "");
			String resp = first.getOrDefault("result", "");
			if (!req.isBlank() || !resp.isBlank()) {
				sb.append("Request:\n").append(req).append("\n\n");
				sb.append("Response:\n").append(resp);
			}
		}
		return sb.toString();
	}

	private List<Map<String, String>> extractAllureSteps(JsonNode testJson, URI allureBaseDataUrl, String authHeader) {
		List<Map<String, String>> steps = new ArrayList<>();
		JsonNode s = testJson.path("steps");
		if (s == null || !s.isArray() || s.isEmpty()) {
			s = testJson.path("testStage").path("steps");
		}
		flattenSteps(s, steps, allureBaseDataUrl, authHeader);
		return steps;
	}

	private void flattenSteps(JsonNode stepsNode, List<Map<String, String>> out, URI allureBaseDataUrl, String authHeader) {
		if (stepsNode == null || !stepsNode.isArray()) return;
		for (JsonNode step : stepsNode) {
			Map<String, String> params = toParamMap(step.path("parameters"));
			String requestFromAttach = findAttachmentText(step, allureBaseDataUrl, authHeader, "request");
			String responseFromAttach = findAttachmentText(step, allureBaseDataUrl, authHeader, "response");

			String action = firstNonBlank(
					requestFromAttach,
					params.get("request"),
					params.get("assert"),
					safe(step.path("name").asText(null))
			);
			String expected = firstNonBlank(
					responseFromAttach,
					params.get("equals"),
					params.get("response"),
					safe(step.path("statusDetails").path("message").asText(null))
			);
			String data = remainingParamsAsString(params, List.of("assert", "equals", "request", "response"));

			Map<String, String> m = new HashMap<>();
			m.put("action", action);
			m.put("data", data);
			m.put("result", expected);
			out.add(m);
			// nested steps
			flattenSteps(step.path("steps"), out, allureBaseDataUrl, authHeader);
		}
	}

	private String findAttachmentText(JsonNode step, URI allureBaseDataUrl, String authHeader, String keyword) {
		JsonNode atts = step.path("attachments");
		if (atts != null && atts.isArray()) {
			for (JsonNode a : atts) {
				String name = safe(a.path("name").asText("")).toLowerCase();
				String source = safe(a.path("source").asText("")).trim();
				if (!source.isEmpty() && name.contains(keyword)) {
					try {
						return safe(allureClient.fetchAttachmentText(allureBaseDataUrl, source, authHeader));
					} catch (Exception ignored) { }
				}
			}
		}
		return "";
	}

	private Map<String, String> toParamMap(JsonNode params) {
		Map<String, String> map = new LinkedHashMap<>();
		if (params == null || !params.isArray()) return map;
		for (JsonNode p : params) {
			String name = safe(p.path("name").asText("")).trim().toLowerCase();
			String value = safe(p.path("value").asText("")).trim();
			if (!name.isEmpty()) {
				map.put(name, value);
			}
		}
		return map;
	}

	private String remainingParamsAsString(Map<String, String> params, List<String> excludeKeys) {
		return params.entrySet().stream()
				.filter(e -> excludeKeys.stream().noneMatch(k -> Objects.equals(k, e.getKey())))
				.map(e -> e.getKey() + "=" + e.getValue())
				.collect(Collectors.joining("; "));
	}

	private String firstNonBlank(String... values) {
		for (String v : values) {
			if (v != null && !v.isBlank()) return v;
		}
		return "";
	}

	private void validateRequired(URI allureBaseDataUrl, String jiraBaseUrl, String pat, String projectKey) {
		if (allureBaseDataUrl == null) {
			throw new IllegalArgumentException("Allure base URL is required (override in request)");
		}
		if (jiraBaseUrl == null || jiraBaseUrl.isBlank()) {
			throw new IllegalArgumentException("Jira base URL is required (override in request or configure app.jira.base-url)");
		}
		if (pat == null || pat.isBlank()) {
			throw new IllegalArgumentException("PAT is required (Authorization: Bearer <token>)");
		}
		if (projectKey == null || projectKey.isBlank()) {
			throw new IllegalArgumentException("Jira project key is required (configure app.jira.project-key)");
		}
	}

	private URI resolveAllureBase(String override) {
		if (override != null && !override.isBlank()) {
			return URI.create(ensureTrailingSlash(override));
		}
		URI fromProps = appProperties.getAllure().getBaseUrl();
		if (fromProps == null) return null;
		return URI.create(ensureTrailingSlash(fromProps.toString()));
	}

	private String resolveJiraBase(String override) {
		if (override != null && !override.isBlank()) {
			return stripTrailingSlash(override);
		}
		return appProperties.getJira().getBaseUrl() != null ? stripTrailingSlash(appProperties.getJira().getBaseUrl().toString()) : null;
	}

	private String resolvePat(String override) {
		if (override != null && !override.isBlank()) {
			return override;
		}
		return appProperties.getJira().getPat();
	}

	private void collectUidsRecursive(JsonNode node, List<String> acc) {
		if (node == null) return;
		if (node.isArray()) {
			for (JsonNode child : node) {
				collectUidsRecursive(child, acc);
			}
			return;
		}
		if (node.has("uid") && node.has("name") && !node.has("children")) {
			acc.add(node.get("uid").asText());
		}
		if (node.has("children")) {
			for (JsonNode child : node.get("children")) {
				collectUidsRecursive(child, acc);
			}
		}
	}

	private String createTestInJira(String baseUrl, String pat, String projectKey, JsonNode testJson, URI allureBaseDataUrl, String authHeader) {
		String name = testJson.path("name").asText("");
		String fullName = testJson.path("fullName").asText("");
		String description = buildDescription(testJson.path("description").asText(""), extractAllureSteps(testJson, allureBaseDataUrl, authHeader));
		String summary = name != null && !name.isBlank() ? name : fullName;
		return jiraXrayClient.createTestIssue(baseUrl, pat, projectKey, summary, description);
	}

	private void addStepsIfEnabled(String baseUrl, String pat, String issueKey, JsonNode testJson, URI allureBaseDataUrl, String authHeader) {
		if (!appProperties.getXray().isEnableSteps() || !appProperties.getXray().isUseApiForSteps()) {
			return;
		}
		List<Map<String, String>> steps = extractAllureSteps(testJson, allureBaseDataUrl, authHeader);
		if (steps.isEmpty()) return;
		for (Map<String, String> step : steps) {
			jiraXrayClient.addManualStep(baseUrl, pat, issueKey,
					step.getOrDefault("action", ""),
					step.getOrDefault("data", ""),
					step.getOrDefault("result", ""));
		}
	}

	private String ensureTrailingSlash(String s) {
		if (s == null || s.isBlank()) return s;
		return s.endsWith("/") ? s : s + "/";
	}

	private String stripTrailingSlash(String s) {
		if (s == null || s.isBlank()) return s;
		return s.endsWith("/") ? s.substring(0, s.length() - 1) : s;
	}

	private String safe(String v) { return v == null ? "" : v; }
}
