
stage('Import to Jira') {
      agent {
               label 'linux'
       }
       when {
               beforeAgent true
               beforeInput true
               expression {
                 ['dev','stable','sstest','preprod'].contains(params.TESTENV) &&
                 ['dev','stable'].contains(params.TESTDOMAIN) &&
                 ['all','regression'].contains(params.TAG) &&
                 !isLibrary &&
                 params.Xray
               }
       }
       tools {
               jdk 'java-17'
       }
       environment {
               JIRA_BASE_URL = 'https://jira.example.com'     // Jira Server/DC URL'iniz
               JIRA_PAT_CRED = 'jira-pat-id'                  // Jenkins Secret Text (PAT) credential ID
       }
       steps {
               script {
                  // 1) Allure zip'i bul (parametre > bilinen aday dizinler)
                  def candidates = [
                      params.ALLURE_ZIP_PATH,
                      "${WORKSPACE}/allure-report.zip",
                      "${PROJECT_NAME}/build/allure-report.zip",
                      "${WORKSPACE}/build/allure/allure-report.zip",
                      "allure-report.zip"
                  ].findAll { it } // null'ları at
                  def allureZipPath = candidates.find { fileExists(it) }
                  if (!allureZipPath) {
                      error "Allure ZIP bulunamadı. 'params.ALLURE_ZIP_PATH' ile tam yolu belirtin."
                  }
                  echo "Allure ZIP bulundu: ${allureZipPath}"

                  // 2) Jenkins Allure URL'i (Jenkins Allure Publisher etkinse)
                  def allureReportUrl = "${env.BUILD_URL}allure/"

                  // 3) Xray’e JUnit import + TE açıklamasına Allure URL
                  exws (extWorkspace) {
                        step([$class: 'XrayImportBuilder',
                               endpointName: '/junit',
                               importFilePath: "${PROJECT_NAME}/build/test-results/**/*.xml",
                               importInParallel: 'false',
                               importToSameExecution: 'true',
                               projectKey: 'TM',
                               serverInstance: 'SERVER-asdsadas-232dsada-sdsdsad-dsd',
                               // Sürümünüze göre testExecInfoJson yerine testExecInfo kullanmanız gerekebilir
                               testExecInfoJson: """{
                                 "fields": {
                                   "summary": "Test Execution - ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                                   "description": "Allure Report: ${allureReportUrl}"
                                 }
                               }""",
                               // Plugin oluşturulan/kullanılan TE key'ini bu env değişkenine yazar
                               testExecKeyOutput: 'XRAY_TE_KEY'
                         ])
                  }

                  if (!env.XRAY_TE_KEY) {
                     error "Xray Test Execution anahtarı alınamadı. Eklenti sürümünde 'testExecKeyOutput' desteğini doğrulayın."
                  }

                  // 4) Mevcut allure-report.zip'i TE issue’una PAT ile attachment olarak yükle (Jira Server/DC)
                  withCredentials([string(credentialsId: env.JIRA_PAT_CRED, variable: 'JIRA_PAT')]) {
                      sh "curl -sS -H 'X-Atlassian-Token: no-check' -H \"Authorization: Bearer ${JIRA_PAT}\" -F \"file=@${allureZipPath}\" ${JIRA_BASE_URL}/rest/api/2/issue/${env.XRAY_TE_KEY}/attachments | cat"
                  }
               }
         }
         post {
           always {
             // Jenkins UI'de Allure raporunu yayınlamak istiyorsanız ve results klasörü mevcutsa:
             script {
               def resultsDir = "${PROJECT_NAME}/build/allure-results"
               if (fileExists(resultsDir)) {
                 allure(results: [[path: resultsDir]])
               }
             }
           }
         }
}
